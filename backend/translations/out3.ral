// Rock Paper Scissors Game Contract

// Struct must be defined globally
struct Game {
  mut playerOne: Address,
  mut playerTwo: Address,
  mut stake: U256,
  mut playerOneChoice: U256,
  mut playerTwoChoice: U256,
  mut playerOneHash: ByteVec,
  mut playerTwoHash: ByteVec,
  mut status: U256,  // GameStatus enum stored as U256
  mut outcome: U256  // GameOutcome enum stored as U256
}

// Alephium has built-in Reentrancy protection, so we don't need to inherit it
Contract RPSv2() {
  // Maps
  mapping[Address, Game] games
  mapping[Address, U256] playerBalances

  // Events
  event GetGameOutcome(outcome: U256)

  // Enums
  enum GameStatus {
    NonExistent = 0
    Started = 1
    Participated = 2
  }

  enum GameOutcome {
    Draw = 0
    PlayerOne = 1
    PlayerTwo = 2
  }

  // Error codes for all asserts and panics
  enum ErrorCodes {
    GameHashNotProvided = 1001
    ProblemWithOtherPlayer = 1002
    OldGameOrNoGame = 1003
    PlayersFundsInsufficient = 1004
    YouAreNotPlayer2 = 1005
    GameNotStarted = 1006
    PlayerFundsInsufficient = 1007
    GameNotReady = 1008
    InvalidSalt = 1009
    InvalidPlayer = 1010
    ChoicesNotRevealed = 1011
    InvalidOutcome = 1012
    NoBalance = 1013
  }

  // Start a new game
  @using(updateFields = true, preapprovedAssets = true, checkExternalCaller = false)
  pub fn startGame(gameHash: ByteVec, opponent: Address, gameStake: U256) -> () {
    let caller = callerAddress!()
    
    // Validate inputs
    assert!(gameHash != #, ErrorCodes.GameHashNotProvided)
    assert!(opponent != nullContractAddress!() && opponent != caller, ErrorCodes.ProblemWithOtherPlayer)
    assert!(games[caller].status == GameStatus.NonExistent, ErrorCodes.OldGameOrNoGame)
    assert!(gameStake <= playerBalances[caller], ErrorCodes.PlayersFundsInsufficient)

    // Deduct stake from player's balance
    playerBalances[caller] = playerBalances[caller] - gameStake
    
    // Create new game
    let newGame = Game {
      playerOne: caller,
      playerTwo: opponent,
      stake: gameStake,
      playerOneChoice: 0,
      playerTwoChoice: 0,
      playerOneHash: gameHash,
      playerTwoHash: #,
      status: GameStatus.Started,
      outcome: GameOutcome.Draw
    }
    // Assignment only works if all nested fields are mutable
    games[caller] = newGame
  }

  // Player 2 joins game
  @using(updateFields = true, preapprovedAssets = true, checkExternalCaller = false)
  pub fn participateGame(gameHash: ByteVec, opponent: Address) -> () {
    let caller = callerAddress!()
    
    // Validate inputs
    assert!(gameHash != #, ErrorCodes.GameHashNotProvided)
    assert!(opponent != nullContractAddress!(), ErrorCodes.ProblemWithOtherPlayer)
    assert!(games[opponent].playerTwo == caller, ErrorCodes.YouAreNotPlayer2)
    assert!(games[opponent].status == GameStatus.Started, ErrorCodes.GameNotStarted)

    let gameStake = games[opponent].stake
    assert!(gameStake <= playerBalances[caller], ErrorCodes.PlayerFundsInsufficient)

    // Deduct stake from player's balance
    playerBalances[caller] = playerBalances[caller] - gameStake

    // Update game state
    let mut game = games[opponent]
    game.playerTwoHash = gameHash
    game.status = GameStatus.Participated
    games[opponent] = game
  }

  // Reveal player choice
  @using(updateFields = true, checkExternalCaller = false)
  pub fn revealChoice(choice: U256, salt: ByteVec, playerOne: Address) -> () {
    let caller = callerAddress!()
    let mut game = games[playerOne]
    
    assert!(game.status == GameStatus.Participated, ErrorCodes.GameNotReady)
    
    if caller == game.playerOne {
      assert!(game.playerOneHash == getSaltedHash(choice, salt), ErrorCodes.InvalidSalt)
      game.playerOneChoice = choice
    } else if caller == game.playerTwo {
      assert!(game.playerTwoHash == getSaltedHash(choice, salt), ErrorCodes.InvalidSalt)
      game.playerTwoChoice = choice
    } else {
      panic!(ErrorCodes.InvalidPlayer)
    }
    
    games[playerOne] = game
  }

  // End game and determine winner
  @using(updateFields = true, checkExternalCaller = false)
  pub fn endGame(playerOne: Address) -> U256 {
    let game = games[playerOne]
    
    // Validate game state
    assert!(
      game.playerOneChoice > 0 && game.playerTwoChoice > 0,
      ErrorCodes.ChoicesNotRevealed
    )
    
    let playerTwo = game.playerTwo
    let stake = game.stake
    let playerOneChoice = game.playerOneChoice
    let playerTwoChoice = game.playerTwoChoice
    
    // Calculate winner: (3 + playerOneChoice - playerTwoChoice) % 3
    // In Ralph enums are simply U256 values, and there is no type conversion
    let gameResult = (3 + playerOneChoice - playerTwoChoice) % 3
    
    // Distribute winnings
    if gameResult == GameOutcome.Draw {
      playerBalances[playerOne] = playerBalances[playerOne] + stake
      playerBalances[playerTwo] = playerBalances[playerTwo] + stake
    } else if gameResult == GameOutcome.PlayerOne {
      playerBalances[playerOne] = playerBalances[playerOne] + stake * 2
    } else if gameResult == GameOutcome.PlayerTwo {
      playerBalances[playerTwo] = playerBalances[playerTwo] + stake * 2
    } else {
      panic!(ErrorCodes.InvalidOutcome)
    }
    
    // Reset game state
    games[playerOne] = Game{
      playerOne: nullContractAddress!(),
      playerTwo: nullContractAddress!(),
      stake: 0,
      playerOneChoice: 0,
      playerTwoChoice: 0,
      playerOneHash: #,
      playerTwoHash: #,
      status: GameStatus.NonExistent,
      outcome: GameOutcome.Draw
    }
    
    // Emit event
    emit GetGameOutcome(gameResult)
    return gameResult
  }

  // Internal function to generate salted hash
  fn getSaltedHash(answer: U256, salt: ByteVec) -> ByteVec {
    return keccak256!(encodeToByteVec!(answer, salt))
  }

  // Deposit funds
  @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false)
  pub fn deposit() -> () {
    let caller = callerAddress!()
    let amount = tokenRemaining!(caller, ALPH)
    playerBalances[caller] = playerBalances[caller] + amount
  }

  // Withdraw funds
  @using(assetsInContract = true, updateFields = true, checkExternalCaller = false)
  pub fn withdraw() -> () {
    let caller = callerAddress!()
    let playerBalance = playerBalances[caller]
    
    assert!(playerBalance > 0, ErrorCodes.NoBalance)
    playerBalances[caller] = 0
    
    transferTokenFromSelf!(caller, ALPH, playerBalance)
  }

  // Get contract ALPH balance
  @using(assetsInContract = true, checkExternalCaller = false)
  pub fn getContractBalance() -> U256 {
    return tokenRemaining!(selfAddress!(), ALPH)
  }

  // Get player balance
  pub fn getPlayerBalance(playerAddress: Address) -> U256 {
    return playerBalances[playerAddress]
  }

  // Get caller address
  pub fn getMsgSender() -> Address {
    return externalCallerAddress!()
  }
}