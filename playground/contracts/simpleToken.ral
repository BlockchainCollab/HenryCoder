import "std/fungible_token_interface"

Contract SimpleToken(
  owner: Address,
  mut supply: U256
) implements IFungibleToken {
  enum ErrorCodes {
    NotOwner = 1
    InvalidAmount = 2
  }

  pub fn getSymbol() -> ByteVec {
    return b`STK`
  }

  pub fn getName() -> ByteVec {
    return b`SimpleToken`
  }

  pub fn getDecimals() -> U256 {
    return 8
  }
  pub fn getTotalSupply() -> U256 {
    return supply
  }

  @using(updateFields = true, assetsInContract = true)
  fn mint_(to_: Address, amount_: U256) -> () {
    transferTokenFromSelf!(to_, selfTokenId!(), amount_)
    supply = supply + amount_
  }

  @using(updateFields = true, preapprovedAssets = true, payToContractOnly = true)
  fn burn_(from_: Address, amount_: U256) -> () {
    transferTokenToSelf!(from_, selfTokenId!(), amount_)
    supply = supply - amount_
  }

  pub fn mint(to: Address, amount: U256) -> () {
    checkCaller!(externalCallerAddress!() == owner, ErrorCodes.NotOwner)
    // Make sure the amount is valid
    assert!(amount > 0, ErrorCodes.InvalidAmount)
    
    // Mint the tokens
    mint_(to, amount)
  }

  @using(preapprovedAssets = true, checkExternalCaller = false)
  pub fn burn(from: Address, amount: U256) -> () {
    // Make sure the amount is valid
    assert!(amount > 0, ErrorCodes.InvalidAmount)
    // Burn the tokens
    burn_{from -> selfTokenId!(): amount}(from, amount)
  }
}
